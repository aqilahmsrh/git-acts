name: CICD
#
on:
   push:
    branches: 
     - aqilahmsrh-patch-11

jobs:
  Deploy:
    name: deploy
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [18.x]
        
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
     
      - name: serverless deploy
        uses: serverless/github-action@v3.2
        with:
          args: deploy
        env:
        # SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}
        # or if using AWS credentials directly
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          
#       - name: AWS Test Configuration
#         uses: aws-actions/configure-aws-credentials@v2
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ secrets.AWS_REGION }}

#       - name: 'Create Zip File'
#         id: 'create_package'
#         run: |
#           PACKAGE_NAME=build-$(date +"%Y-%m-%d-%H-%M-%S").zip
#           echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
#           zip -r $PACKAGE_NAME .
          
#       - name: check
#         run: |
#           echo ${{ steps.create_package.outputs.package_name }}
          
#       - name: 'Create Artifacts'
#         id: 'create_artifacts'
#         uses: actions/upload-artifact@v3
#         with:
#           name: latest-build
#           path: ${{ github.workspace }}/${{ steps.create_package.outputs.package_name }}
      
#       - name: 'Upload to S3 Bucket'
#         run: aws s3 cp ${{ steps.create_package.outputs.package_name }} s3://${{ secrets.AWS_S3_BUCKET_NAME }}
     
#       - name: 'Download from S3 Bucket'
#         run: aws s3 cp s3://bucket-test-777/build-2023-05-31-04-15-48.zip .
        
#       - name: Store artifact
#         uses: actions/upload-artifact@v3
#         with:
#           name: Artifact from s3
#           path: ./build-2023-05-31-04-15-48.zip
          
          
# jobs:
#   Build:
#     runs-on: ubuntu-latest

#     steps:
#       - uses: actions/checkout@v3
      
#       - name: AWS Test Configuration
#         uses: aws-actions/configure-aws-credentials@v2
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ secrets.AWS_REGION }}

#       - name: Build Zip File
#         id: build_zip
#         run: |
        
#           ZIP_NAME=build-$(date +"%Y-%m-%d-%H-%M-%S").zip
#           zip -r $ZIP_NAME ./
#           ZIP_DIR=/home/runner/work/git-acts/git-acts/$ZIP_NAME
#           echo $(pwd) 
#           echo $ZIP_NAME
#           echo $ZIP_DIR
#           echo $(ls -l ./)
      
#       - name: 'check'
#         run: echo $ZIP_DIR
     
#       - name: 'Create Artifacts'
#         id: 'create_artifacts'
#         uses: actions/upload-artifact@v3
#         with:
#           name: latest-build
#           path: $ZIP_DIR
          
#       - name: Check Path
#         run: echo $ZIP_DIR
       
#       - name: Upload Zip File to S3
#         run: aws s3 cp ${{ github.workspace }}/${{ steps.build_zip.outputs.build }} s3://${{ secrets.AWS_S3_BUCKET_NAME }}
      
#       - uses: shallwefootball/s3-upload-action@master
#         name: Upload Zip File to S3
#         id: S3
#         with:
#           aws_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
#           aws_bucket: ${{ secrets.AWS_S3_BUCKET_NAME}}
#           source_dir: ./$ZIP_NAME
      
#   DeployLambdatoDev:
#     if: github.event_name == 'pull_request' && success()
#     needs: [Build]
#     runs-on: ubuntu-latest
#     environment:
#       name: LambdaDeployment
#     steps:
#         - name: 'Configure AWS Credentials'
#           uses: aws-actions/configure-aws-credentials@v2
#           with:
#               aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#               aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#               aws-region: ${{ secrets.AWS_REGION }}
              
#         - name: Deploy to Lambda Function
#           run: |
#               LATEST_ZIP=$(aws s3 ls s3://${{ secrets.AWS_S3_BUCKET_NAME }} --recursive --human-readable --summarize | grep 'build-' | awk '{ print $NF }' | sort -r | head -n 1)
#               aws lambda update-function-code --function-name ${{ secrets.AWS_LAMBDA_NAME }} --s3-bucket ${{ secrets.AWS_S3_BUCKET_NAME }} --s3-key $LATEST_ZIP
  
#   DeploySIT:
#     name: Deploy to SIT Environment
#     if: github.event_name == 'pull_request' && success()
#     needs: [DeployLambdatoDev]
#     runs-on: ubuntu-latest
#     environment:
#       name: develop
#       url: "http://SIT.Reach.com"
#     steps:
#       - name: Deploy
#         run: echo "Deploying to SIT Environment"
#         #This is where the deployment phase should be coded
  
#   DeployStaging:
#     name: Deploy to Staging Environment
#     if: github.event_name == 'pull_request' && success()
#     needs: [DeploySIT]
#     runs-on: ubuntu-latest
#     environment:
#       name: staging
#       url: "http://Staging.Reach.com"
#     steps:
#       - name: Deploy
#         run: echo "Deploying to Staging Environment"
#         #This is where the deployment phase should be coded

#   DeployPre-prodution:
#     name: Deploy to Pre-prod Environment
#     if: github.event_name == 'pull_request' && success()
#     needs: [DeployStaging]
#     runs-on: ubuntu-latest
#     environment:
#       name: Pre-production
#       url: "http://Pre-prod.Reach.com"
#     steps:
#       - name: Deploy
#         run: echo "Deploying to Pre-prod Environment"
#         #This is where the deployment phase should be coded
