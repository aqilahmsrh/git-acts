name: CICD

on:
  push:
    branches: 
      - DEV
      - SIT
      - UAT
      - staging
      - prod
  
  pull_request: 
    branches:
      - SIT
      - UAT
      - staging
      - prod

  workflow_dispatch:

jobs:
  Build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      
      - name: AWS Test Configuration
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Build Zip File
        id: build_zip
        run: |
          # Set a unique identifier for the zip file
          ZIP_NAME=build-$(date +"%Y-%m-%d-%H-%M-%S").zip

          # Create the zip file with the unique name
          # zip -r $ZIP_NAME ./src
          zip -r $ZIP_NAME ./

          # Export the zip file name as an output variable
          echo "::set-output name=build::$ZIP_NAME"
          # echo "{build}={$ZIP_NAME}" >> $GITHUB_OUTPUT
          
      - name: 'Create Artifacts'
        id: 'create_artifacts'
        uses: actions/upload-artifact@v3
        with:
          name: latest-build
          path: ${{ github.workspace }}/${{ steps.build_zip.outputs.build }}

      - name: Upload Zip File to S3
        run: aws s3 cp ${{ github.workspace }}/${{ steps.build_zip.outputs.build }} s3://${{ secrets.AWS_S3_BUCKET_NAME }}
      
#       - uses: shallwefootball/s3-upload-action@master
#         name: Upload Zip File to S3
#         id: S3
#         with:
#           aws_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
#           aws_bucket: ${{ secrets.AWS_S3_BUCKET_NAME}}
#           source_dir: ${{ github.workspace }}/${{ steps.build_zip.outputs.build }}
      
  DeploytoDev:
    if: github.event.ref != 'refs/heads/release/DEV' && github.event_name == 'pull_request'
    needs: [Build]
    runs-on: ubuntu-latest
    environment:
      name: LambdaDeployment
    steps:
        - name: 'Configure AWS Credentials'
          uses: aws-actions/configure-aws-credentials@v2
          with:
              aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
              aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              aws-region: ${{ secrets.AWS_REGION }}
              
        - name: Deploy to Lambda Function
          run: |
              LATEST_ZIP=$(aws s3 ls s3://${{ secrets.AWS_S3_BUCKET_NAME }} --recursive --human-readable --summarize | grep 'build-' | awk '{ print $NF }' | sort -r | head -n 1)
              aws lambda update-function-code --function-name ${{ secrets.AWS_LAMBDA_NAME }} --s3-bucket ${{ secrets.AWS_S3_BUCKET_NAME }} --s3-key $LATEST_ZIP
  
  DeploytoSIT:
    name: Deploy to SIT Environment
    if: github.event.ref == 'refs/heads/release/SIT'
    needs: [Build]
    runs-on: ubuntu-latest
    environment:
      name: develop
      url: "http://SIT.Reach.com"
    steps:
      - name: Deploy
        run: echo "Deploying to SIT Environment"
        #This is where the deployment phase should be coded
  
  DeploytoStaging:
    name: Deploy to Staging Environment
    if: github.event.ref == 'refs/heads/release/staging'
    needs: [Build]
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: "http://Staging.Reach.com"
    steps:
      - name: Deploy
        run: echo "Deploying to Staging Environment"
        #This is where the deployment phase should be coded

  DeploytoProd:
    name: Deploy to Pre-prod Environment
    if: github.event.ref == 'refs/heads/release/Prod'
    needs: [Build]
    runs-on: ubuntu-latest
    environment:
      name: Pre-production
      url: "http://Pre-prod.Reach.com"
    steps:
      - name: Deploy
        run: echo "Deploying to Pre-prod Environment"
        #This is where the deployment phase should be coded
